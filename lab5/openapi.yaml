openapi: 3.0.0
info:
  version: '1.0.0'
  title: Pharmacy
  description: Варіант 15. Написати сервіс для роботи аптеки. Провізор може додавати препарати в базу, видаляти, редагувати інформацію про них. Користувач може переглядати інформацію про препарати, здійснювати купівлю, якщо немає препарату в наявності, то його можна додати в попит.
tags:
  - name: medicine
    description: Ліки та операції над ними, що доступні провізору
  - name: pharmacy
    description: Аптека, в якій можна придбати ці ліки
  - name: user
    description: Містить інформацію про користувача та виконує операції над ним
servers: 
  - url: 'https://petstore.swagger.io/v2'
paths:
  /medicine:
    post:
      tags:
        - medicine
      summary: Додати певний препарат у базу
      description: Користуватися може тільки провізор
      operationId: addNewMedicine
      security:
        - provizor_api_key: []
      responses:
        '200': 
          description: Препарат успішно доданий
        '400':
         description: Неправильний запит
      requestBody:
        $ref: '#/components/requestBodies/Medicine'
    put:
      tags:
        - medicine
      summary: Оновити інформацію про певний препарат
      description: Користуватися може тільки провізор
      operationId: updateMedicine
      security:
        - provizor_api_key: []
      responses:
        '200':
          description: Успішне оновлення
        '400':
          description: Неіснуючий код провізора
        '404':
          description: Неіснуючий препарат
      requestBody:
        $ref: '#/components/requestBodies/Medicine'
    get:
      tags:
        - medicine
      summary: Отримати список всіх препаратів у попиті
      description: Користуватися може тільки провізор
      operationId: getMedicinesDemandTrue
      security:
        - provizor_api_key: []
      parameters:
        - name: demand
          in: query
          description: Товар у попиті хоча б в одного користувача
          required: true
          schema:
            type: boolean
            enum: 
              - true
      responses:
        '200':
          description: Список успішно отриманий
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Medicine'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Medicine'
        '400':
          description: Недопустиме значення 
  '/medicine/{id_medicine}':
    delete:
      tags:
        - medicine
      summary: Видалити препарат з бази за індексом
      description: Користуватися може тільки провізор
      operationId: deleteIdMedicine
      security:
        - provizor_api_key: []
      parameters:
        - name: id_medicine
          in: path
          description: Id препарату, який необхідно видалити
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Препарат успішно видален
        '400':
          description: Недопустиме значення
        '404':
          description: Препарат не знайдений
  /pharmacy:
    get:
      tags:
        - pharmacy
      summary: Отримати інформацію про всі ліки в аптеці
      description: Всі мають доступ до інформації
      operationId: getAllMedicines
      responses:
        '200':
          description: Інформація успішно отримана
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Medicine'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Medicine'
        '404':
          description: Препарати не знайдені
  /pharmacy/getMedicines:
    get:
      tags:
        - pharmacy
      summary: Отримання всі препарати, які відповідають певним фільтрам
      description: Всі мають доступ до інформації
      operationId: getMedicineByFilters
      parameters:
        - name: name_medicine
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
        - name: category
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Category'
        - name: manufacturer
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
        - name: in_stock
          in: query
          required: false
          schema:
            type: array
            items:
              type: boolean
      responses:
        '200':
          description: Інформація успішно отримана
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Medicine'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Medicine'
        '404':
          description: Препарати не знайдені        
  '/pharmacy/{id_category}':
    get:
      tags:
        - pharmacy
      summary: Отримати препарати певної категорії
      description: Всі мають доступ до інформації
      operationId: getMedicineByCategory
      parameters:
        - name: id_category
          in: path
          description: Назва категорії
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Інформація успішно отримана
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Medicine'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Medicine'
        '404':
          description: Препарати не знайдені 
  '/pharmacy/{id_medicine}':
    get:
      tags:
        - pharmacy
      summary: Отримати препарат за ID
      description: Всі мають доступ до інформації
      parameters:
        - name: id_medicine
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Інформація успішно отримана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Medicine'
            application/xml:
              schema:
                $ref: '#/components/schemas/Medicine'
        '404':
          description: Препарати не знайдені 
  /user:
    post:
      tags:
        - user
      summary: Створити нового користувача
      description: Тільки для зареєстрованих користувачів
      operationId: createUser
      security:
        - provizor_api_key: []
      responses:
        '200':
          description: Користувач успішно доданий
        '400':
         description: Неправильний запит
      requestBody:
        $ref: '#/components/requestBodies/User'
  /user/login:
    get:
      tags:
        - user
      summary: Вхід користувача в систему
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: Логін
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Пароль
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Вхід виконан успішно
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        '400':
          description: Неправильний логін або пароль
  /user/logout:
    get:
      tags:
        - user
      summary: Вихід користувача з системи
      operationId: logoutUser
      responses:
        '200':
          description: Вихід завершився з успіхом
  '/user/{username}':
    get:
      tags:
        - user
      summary: Отримати інформацію про користувача по імені
      operationId: getUserByName
      security:
        - provizor_api_key: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Інформація успішно отримана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Неправильне ім'я користувача
        '404':
          description: Користувач не знайлений
    put:
      tags:
        - user
      summary: Оновити інформацію про користувача
      description: Тільки для зареєстрованих користувачів
      operationId: updateUser
      security:
        - user_auth:
          - 'write:order'
          - 'read:order'
      parameters:
        - name: username
          in: path
          description: Ім'я користувача
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Недопустиме ім'я
        '404':
          description: Користувач не знайдений
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
    delete:
      tags:
        - user
      summary: Видалити користувача
      description: Тільки для зареєстрованих користувачів
      operationId: deleteUser
      security:
        - user_auth:
          - 'write:order'
          - 'read:order'
      parameters:
        - name: username
          in: path
          description: Ім'я користувача, якого необхідно видалити
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Недопустиме ім'я
        '404':
          description: Користувач не знайдений
  /pharmacy/order:
    post:
      tags:
        - pharmacy
      summary: Замовити ліки
      operationId: placeOrder
      security:
        - user_auth:
          - 'write:order'
          - 'read:order'
      responses:
        '200':
          description: Ліки успішно замовлені
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Недопустимі дані
      requestBody:
        $ref: '#/components/requestBodies/Order'
  '/pharmacy/ordersByUser/{username}':
    get:
      tags:
        - pharmacy
      summary: Користувач може переглянути всі свої замовлення
      description: Тільки для зареєстрованих користувачів
      operationId: getOrdersByUser
      security:
        - user_auth:
          - 'write:order'
          - 'read:order'
      parameters:
        - name: username
          in: path
          required: true
          description: Ім'я користувача
          schema:
            type: string
        - name: status
          in: query
          required: false
          description: Статус замовлення (за бажанням)
          schema:
            type: string
            enum:
              - placed
              - approved
              - delivered
        - name: medicines
          in: query
          required: false
          description: Конкретні препарати (за бажанням)
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Medicine'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Некоректні дані
        '404':
          description: Замовлення не знайдені
  '/store/order/{orderId}':
    get:
      tags:
        - pharmacy
      summary: Перегляд будь-якого замовлення
      description: Доступно тільки провізору
      operationId: getOrderById
      security:
        - provizor_api_key: []
      parameters:
        - name: orderId
          in: path
          description: Id шуканого замовлення
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 10
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Недопустимі значення
        '404':
          description: Замовлення не знайдено
    delete:
      tags:
        - pharmacy
      summary: Видалення замовлення провізором
      description: Доступно тільки провізору
      operationId: deleteOrderById
      security:
        - provizor_api_key: []
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
components:
  schemas:
    Category:
      type: object
      properties:
        id_category:
          type: integer
          format: int64
        name_category:
          type: string
    Medicine:
      type: object
      properties:
        id_medicine:
          type: integer
          format: int64
        name_medicine:
          type: string
        id_category:
          type: integer
          format: int64
        manufacturer:
          type: string
        price:
          type: integer
          format: int64
        in_stock:
          type: boolean
        demand:
          type: boolean
        in_stock_number:
          type: integer
          format: int64
        demand_number:
          type: integer
          format: int64
      xml:
        name: Medicine
    User:
      type: object
      properties:
        id_user:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
      xml:
        name: User
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        id_medicines:
          type: array
          items:
            $ref: '#/components/schemas/Medicine'
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
  requestBodies:
    Medicine:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Medicine'
        application/xml:
          schema:
            $ref: '#/components/schemas/Medicine'
      description: Препарат, який буде додано в базу
      required: true
    User:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
        application/xml:
          schema:
            $ref: '#/components/schemas/User'
      description: Користувач, який буде доданий в базу
      required: true
    Order:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Order'
        application/xml:
          schema:
            $ref: '#/components/schemas/Order'
      description: Замовлення, яке буде додане в базу
      required: true
  securitySchemes:
    provizor_api_key:
      type: apiKey
      name: provizor_api_key
      in: header
    user_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
          scopes:
            'write:order': Робити замовлення
            'read:order': Переглядати замовлення